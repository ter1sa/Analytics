#Creating Results Table
#Mild Error: supposed to be mild, but wrongly classified as moderate/severe
#Moderate Error: supposed to be moderate, but wrongly classified as mild/severe
#Severe Error: supposed to be severe, but wrongly classified as mild/moderate
sev_nn_results_tab <- matrix(data = NA, nrow=4, ncol=4)
rownames(sev_nn_results_tab) <- c('Trainset (1 layer)', 'Testset (1 layer)', 'Trainset (2 layers)', 'Testset (2 layers)')
colnames(sev_nn_results_tab) <- c('Mild Error', 'Moderate Error','Severe Error', 'Total Error')
#Generating 1 Hidden Layer Neural Network model
#number of neurons in the hidden layer should be 2/3 size of input layer + size of output layer
#source: https://medium.com/geekculture/introduction-to-neural-network-2f8b8221fbd3
sev_nn_1ly <- neuralnet(Severity ~ ., data = sev_train_nn, hidden = round((2/3)*(ncol(sev_test)-1) + 3), err.fct="ce", linear.output=FALSE)
plot(sev_nn_1ly)
#Generating trainset confusion matrix for 1 Hidden Layer Neural Network model
sev_nn_1ly_train_predict <- predict(sev_nn_1ly, newdata=sev_train_nn, type = 'class')
sev_nn_1ly_train_predict_df <- data.frame(sev_nn_1ly_train_predict)
for (i in 1: nrow(sev_nn_1ly_train_predict_df)){
if (sev_nn_1ly_train_predict_df[i,1] >= 0.5){
sev_nn_1ly_train_predict_df$outcome[i] = 'Mild'
}
else if (sev_nn_1ly_train_predict_df[i,2] >= 0.5){
sev_nn_1ly_train_predict_df$outcome[i] = 'Moderate'
}
else if (sev_nn_1ly_train_predict_df[i,3] >= 0.5){
sev_nn_1ly_train_predict_df$outcome[i] = 'Severe'
}
}
sev_nn_1ly_train_cmatrix <- table(as.factor(sev_train_nn$Severity), as.factor(sev_nn_1ly_train_predict_df$outcome))
#Adding trainset errors into table
sev_nn_results_tab[1,1] <- sum(sev_nn_1ly_train_cmatrix[1,2:3])/sum(sev_nn_1ly_train_cmatrix[1,])
sev_nn_results_tab[1,2] <- sum(sev_nn_1ly_train_cmatrix[2,c(1,3)])/sum(sev_nn_1ly_train_cmatrix[2,])
sev_nn_results_tab[1,3] <- sum(sev_nn_1ly_train_cmatrix[3,1:2])/sum(sev_nn_1ly_train_cmatrix[3,])
sev_nn_results_tab[1,4] <- (sum(sev_nn_1ly_train_cmatrix[1,2:3]) + sum(sev_nn_1ly_train_cmatrix[2,c(1,3)]) + sum(sev_nn_1ly_train_cmatrix[3,1:2]))/nrow(sev_train_nn)
#Generating testset confusion matrix for 1 Hidden Layer Neural Network model
sev_nn_1ly_test_predict <- predict(sev_nn_1ly, newdata=sev_test_nn, type = 'class')
sev_nn_1ly_test_predict_df <- data.frame(sev_nn_1ly_test_predict)
for (i in 1: nrow(sev_nn_1ly_test_predict_df)){
if (sev_nn_1ly_test_predict_df[i,1] >= 0.5){
sev_nn_1ly_test_predict_df$outcome[i] = 'Mild'
}
else if (sev_nn_1ly_test_predict_df[i,2] >= 0.5){
sev_nn_1ly_test_predict_df$outcome[i] = 'Moderate'
}
else if (sev_nn_1ly_test_predict_df[i,3] >= 0.5){
sev_nn_1ly_test_predict_df$outcome[i] = 'Severe'
}
}
sev_nn_1ly_test_cmatrix <- table(as.factor(sev_test_nn$Severity), as.factor(sev_nn_1ly_test_predict_df$outcome))
#Adding trainset errors into table
sev_nn_results_tab[2,1] <- sum(sev_nn_1ly_test_cmatrix[1,2:3])/sum(sev_nn_1ly_test_cmatrix[1,])
sev_nn_results_tab[2,2] <- sum(sev_nn_1ly_test_cmatrix[2,c(1,3)])/sum(sev_nn_1ly_test_cmatrix[2,])
sev_nn_results_tab[2,3] <- sum(sev_nn_1ly_test_cmatrix[3,1:2])/sum(sev_nn_1ly_test_cmatrix[3,])
sev_nn_results_tab[2,4] <- (sum(sev_nn_1ly_test_cmatrix[1,2:3]) + sum(sev_nn_1ly_test_cmatrix[2,c(1,3)]) + sum(sev_nn_1ly_test_cmatrix[3,1:2]))/nrow(sev_test_nn)
#Generating 2 Hidden Layer Neural Network model
#number of neurons in the hidden layer should be 2/3 size of input layer + size of output layer
#source: https://medium.com/geekculture/introduction-to-neural-network-2f8b8221fbd3
sev_nn_2ly <- neuralnet(Severity ~ ., data = sev_train_nn, hidden = c((round((2/3)*(ncol(sev_test)-1) + 3)),(round((2/3)*(ncol(sev_test)-1) + 3))) , err.fct="ce", linear.output=FALSE)
plot(sev_nn_2ly)
#Generating trainset confusion matrix for 2 Hidden Layer Neural Network model
sev_nn_2ly_train_predict <- predict(sev_nn_2ly, newdata=sev_train_nn, type = 'class')
sev_nn_2ly_train_predict_df <- data.frame(sev_nn_2ly_train_predict)
for (i in 1: nrow(sev_nn_2ly_train_predict_df)){
if (sev_nn_2ly_train_predict_df[i,1] >= 0.5){
sev_nn_2ly_train_predict_df$outcome[i] = 'Mild'
}
else if (sev_nn_2ly_train_predict_df[i,2] >= 0.5){
sev_nn_2ly_train_predict_df$outcome[i] = 'Moderate'
}
else if (sev_nn_2ly_train_predict_df[i,3] >= 0.5){
sev_nn_2ly_train_predict_df$outcome[i] = 'Severe'
}
}
sev_nn_2ly_train_cmatrix <- table(as.factor(sev_train_nn$Severity), as.factor(sev_nn_2ly_train_predict_df$outcome))
#Adding trainset errors into table
sev_nn_results_tab[3,1] <- sum(sev_nn_2ly_train_cmatrix[1,2:3])/sum(sev_nn_2ly_train_cmatrix[1,])
sev_nn_results_tab[3,2] <- sum(sev_nn_2ly_train_cmatrix[2,c(1,3)])/sum(sev_nn_2ly_train_cmatrix[2,])
sev_nn_results_tab[3,3] <- sum(sev_nn_2ly_train_cmatrix[3,1:2])/sum(sev_nn_2ly_train_cmatrix[3,])
sev_nn_results_tab[3,4] <- (sum(sev_nn_2ly_train_cmatrix[1,2:3]) + sum(sev_nn_2ly_train_cmatrix[2,c(1,3)]) + sum(sev_nn_2ly_train_cmatrix[3,1:2]))/nrow(sev_train_nn)
#Generating testset confusion matrix for 2 Hidden Layer Neural Network model
sev_nn_2ly_test_predict <- predict(sev_nn_2ly, newdata=sev_test_nn, type = 'class')
sev_nn_2ly_test_predict_df <- data.frame(sev_nn_2ly_test_predict)
for (i in 1: nrow(sev_nn_2ly_test_predict_df)){
if (sev_nn_2ly_test_predict_df[i,1] >= 0.5){
sev_nn_2ly_test_predict_df$outcome[i] = 'Mild'
}
else if (sev_nn_2ly_test_predict_df[i,2] >= 0.5){
sev_nn_2ly_test_predict_df$outcome[i] = 'Moderate'
}
else if (sev_nn_2ly_test_predict_df[i,3] >= 0.5){
sev_nn_2ly_test_predict_df$outcome[i] = 'Severe'
}
}
sev_nn_2ly_test_cmatrix <- table(as.factor(sev_test_nn$Severity), as.factor(sev_nn_2ly_test_predict_df$outcome))
#Adding testset errors into table
sev_nn_results_tab[4,1] <- sum(sev_nn_2ly_test_cmatrix[1,2:3])/sum(sev_nn_2ly_test_cmatrix[1,])
sev_nn_results_tab[4,2] <- sum(sev_nn_2ly_test_cmatrix[2,c(1,3)])/sum(sev_nn_2ly_test_cmatrix[2,])
sev_nn_results_tab[4,3] <- sum(sev_nn_2ly_test_cmatrix[3,1:2])/sum(sev_nn_2ly_test_cmatrix[3,])
sev_nn_results_tab[4,4] <- (sum(sev_nn_2ly_test_cmatrix[1,2:3]) + sum(sev_nn_2ly_test_cmatrix[2,c(1,3)]) + sum(sev_nn_2ly_test_cmatrix[3,1:2]))/nrow(sev_test_nn)
#since 1 Hidden Level Neural Network produced a model with a lower total error, it would be adopted over the 2 Hidden Layer model.
# OVERALL ERROR TABLE ----------------------------------------------------------
#Creating overall error table
sev_error_tab <- matrix(data = NA, nrow=6, ncol=4)
rownames(sev_error_tab) <- c('Logistic Regression Train', 'Logistic Regression Test', 'Random Forest Train', 'Random Forest Test', 'Neural Network (1 lvl) Train', 'Neural Network (1 lvl) Test')
colnames(sev_error_tab) <- c('Mild Error', 'Moderate Error','Severe Error', 'Total Error')
#Adding errors from the 3 models into the table
sev_error_tab[1:2,]<- sev_logreg_results_tab
sev_error_tab[3:4,]<- sev_rf_results_tab
sev_error_tab[5:6,]<- sev_nn_results_tab[1:2,]
# RANDOM CODES------
severity_cart <- rpart(Severity ~ ., data = severity_data, method = 'class', control = rpart.control(minsplit = 10, cp = 0))
rpart.plot(severity_cart, box.palette = list("green","yellow","red"))
severity_mild <- with(severity_data, severity_data[(Severity== "Mild"), ])
severity_moderate <- with(severity_data, severity_data[(Severity== "Moderate"), ])
severity_severe <- with(severity_data, severity_data[(Severity== "Severe"), ])
summary(severity_mild)
summary(severity_moderate)
summary(severity_severe)
sev_error_tab
sev_error_tab
#==================================
# ICU prediction model Analysis
#==================================
setwd("/Users/chanyixuan/Documents/NTU/Y2S2/BC2407 Analytics II/Group Project/BC2407_Sem4_Team8/Data Sets")
library(data.table)
library(rpart)
library(rpart.plot)
library(nnet)
library(caTools)
library(randomForest)
library(neuralnet)
# DATA PREPARATION -------------------------------------------------------------
icu <- fread('ICU_Data_Cleaned.csv', stringsAsFactors = TRUE)
View(icu) # checking datatype for each variable
icu$ICU <- as.factor(icu$ICU)
icu$AGE_ABOVE65 <- as.factor(icu$AGE_ABOVE65)
icu$AGE_PERCENTIL <- as.factor(icu$AGE_PERCENTIL)
icu$GENDER <- as.factor(icu$GENDER)
icu$HTN <- as.factor(icu$HTN)
icu$IMMUNOCOMPROMISED <- as.factor(icu$IMMUNOCOMPROMISED)
summary(icu)
#Split into 70-30 Train-Test set
set.seed(15)
train <- sample.split(Y = icu$ICU, SplitRatio = 0.7)
icu_train <- subset(icu, train == T)
icu_test <- subset(icu, train == F)
#random sample from majority class ICU = 0 and combine with ICU = 1,
majority <- subset(icu_train,ICU=="0")
minority <- subset(icu_train,ICU=='1')
#randomly sample the row numbers to be in train set. Same sample size as minority cases
set.seed(15)
chosen <- sample(seq(1:nrow(majority)), size = nrow(minority))
#subset the original trainset based on randomly chosen row numbers
majority.chosen <- majority[chosen,]
#combine the 2 data tables by appending the rows
icu_train.bal <- rbind(majority.chosen,minority)
#check train set is balanced
summary(icu_train.bal$ICU)
# BINOMIAL LOGISTIC REGRESSION MODEL ----------------------------------------
set.seed(15)
#Creating Results Table
#False Positive Rate: supposed to be not be admitted to ICU (ICU=0), but wrongly classified as admitted (ICU=1)
#False Negative Rate: supposed to be be admitted to ICU (ICU=1), but wrongly classified as not admitted (ICU=0)
icu_logreg_results_tab <- matrix(data = NA, nrow=2, ncol=7)
rownames(icu_logreg_results_tab) <- c('Trainset', 'Testset')
colnames(icu_logreg_results_tab) <- c('Model','FPR','FNR','Err', 'Precision', 'Recall', 'F1 Score')
#Generating full logreg model
icu_logreg_full <- glm(ICU~.,family = binomial, data = icu_train.bal)
summary(icu_logreg_full)
#Generating logreg model with backward elimination
icu_logreg_wBE <- step(icu_logreg_full,direction="backward",trace=FALSE)
summary(icu_logreg_wBE)
#Generating t-value to find variable importance
icu_logreg_tval <- sort(coef(summary(icu_logreg_wBE))[,4])
icu_logreg_tval
#Generating trainset error matrix
threshold <- 0.5
icu_prob_train <- predict(icu_logreg_wBE, type = 'response', newdata = icu_train.bal)
icu_predict_train <- ifelse(icu_prob_train > threshold, "1", "0")
icu_logreg_train_cmatrix <- table(icu_train.bal$ICU, icu_predict_train)
icu_logreg_train_cmatrix
fp <- icu_logreg_train_cmatrix[1,2]
tn <- icu_logreg_train_cmatrix[1,1]
fn <- icu_logreg_train_cmatrix[2,1]
tp <- icu_logreg_train_cmatrix[2,2]
#Adding trainset errors into table
icu_logreg_results_tab[1,1] <- "Logistic Regression"
icu_logreg_results_tab[1,2] <- fp/(fp+tn)
icu_logreg_results_tab[1,3] <- fn/(fn+tp)
icu_logreg_results_tab[1,4] <- (fp+fn)/(fp+tn+fn+tp)
precision <- tp/(tp+fp)
icu_logreg_results_tab[1,5] <- precision
recall <- tp/(tp+fn)
icu_logreg_results_tab[1,6] <- recall
icu_logreg_results_tab[1,7] <- 2 * ((precision*recall)/(precision + recall))
View(icu_logreg_results_tab)
#Generating testset error matrix
icu_prob_test <- predict(icu_logreg_full, type = 'response', newdata = icu_test)
icu_predict_test <- ifelse(icu_prob_test > threshold, "1", "0")
icu_logreg_test_cmatrix <- table(icu_test$ICU, icu_predict_test)
icu_logreg_test_cmatrix
fp <- icu_logreg_test_cmatrix[1,2]
tn <- icu_logreg_test_cmatrix[1,1]
fn <- icu_logreg_test_cmatrix[2,1]
tp <- icu_logreg_test_cmatrix[2,2]
#Adding testset errors into table
icu_logreg_results_tab[2,1] <- "Logistic Regression"
icu_logreg_results_tab[2,2] <- fp/(fp+tn)
icu_logreg_results_tab[2,3] <- fn/(fn+tp)
icu_logreg_results_tab[2,4] <- (fp+fn)/(fp+tn+fn+tp)
precision <- tp/(tp+fp)
icu_logreg_results_tab[2,5] <- precision
recall <- tp/(tp+fn)
icu_logreg_results_tab[2,6] <- recall
icu_logreg_results_tab[2,7] <- 2 * ((precision*recall)/(precision + recall))
View(icu_logreg_results_tab)
# RANDOM FOREST MODEL ----------------------------------------------------------
set.seed(15)
#Creating Results Table
#False Positive Rate: supposed to be not be admitted to ICU (ICU=0), but wrongly classified as admitted (ICU=1)
#False Negative Rate: supposed to be be admitted to ICU (ICU=1), but wrongly classified as not admitted (ICU=0)
icu_rf_results_tab <- matrix(data = NA, nrow=2, ncol=7)
rownames(icu_rf_results_tab) <- c('Trainset', 'Testset')
colnames(icu_rf_results_tab) <- c('Model','FPR','FNR','Err', 'Precision', 'Recall', 'F1 Score')
#Generating Random Forest Model
icu_rf <- randomForest(ICU ~ . , data = icu_train.bal,
na.action = na.omit,
importance = T)
#Checking if OOB error has stabilised when default ntree=500
plot(icu_rf$err.rate[,1])
#plot shows OOB error has not stabilised with default ntree=500
#it was found that OOB error will stabilise whe ntree=100000
#Generating Random Forest Model with ntrees=10000
icu_rf <- randomForest(ICU ~ . , data = icu_train.bal, ntree=10000,
na.action = na.omit,
importance = T)
#Generating variable importance using mean decrease accuracy
icu_rf_varimpt <- icu_rf$importance[order(-icu_rf$importance[,4]),]
icu_rf_varimpt
#Generating trainset confusion matrix for Random Forest model
icu_rf_train_predict <- predict(icu_rf, newdata=icu_train.bal, type = 'class')
icu_rf_train_cmatrix <- table(icu_train.bal$ICU, icu_rf_train_predict)
icu_rf_train_cmatrix
fp <- icu_rf_train_cmatrix[1,2]
tn <- icu_rf_train_cmatrix[1,1]
fn <- icu_rf_train_cmatrix[2,1]
tp <- icu_rf_train_cmatrix[2,2]
#Adding trainset errors into table
icu_rf_results_tab[1,1] <- "Random Forest"
icu_rf_results_tab[1,2] <- fp/(fp+tn)
icu_rf_results_tab[1,3] <- fn/(fn+tp)
icu_rf_results_tab[1,4] <- (fp+fn)/(fp+tn+fn+tp)
precision <- tp/(tp+fp)
icu_rf_results_tab[1,5] <- precision
recall <- tp/(tp+fn)
icu_rf_results_tab[1,6] <- recall
icu_rf_results_tab[1,7] <- 2 * ((precision*recall)/(precision + recall))
View(icu_rf_results_tab)
#Generating testset confusion matrix for Random Forest model
icu_rf_test_predict <- predict(icu_rf, newdata=icu_test, type = 'class')
icu_rf_test_cmatrix <- table(icu_test$ICU, icu_rf_test_predict)
fp <- icu_rf_test_cmatrix[1,2]
tn <- icu_rf_test_cmatrix[1,1]
fn <- icu_rf_test_cmatrix[2,1]
tp <- icu_rf_test_cmatrix[2,2]
#Adding testset errors into table
icu_rf_results_tab[2,1] <- "Random Forest"
icu_rf_results_tab[2,2] <- fp/(fp+tn)
icu_rf_results_tab[2,3] <- fn/(fn+tp)
icu_rf_results_tab[2,4] <- (fp+fn)/(fp+tn+fn+tp)
precision <- tp/(tp+fp)
icu_rf_results_tab[2,5] <- precision
recall <- tp/(tp+fn)
icu_rf_results_tab[2,6] <- recall
icu_rf_results_tab[2,7] <- 2 * ((precision*recall)/(precision + recall))
View(icu_rf_results_tab)
# NEURAL NETWORK MODEL ---------------------------------------------------------
set.seed(15)
#Neural Network-specific data processing:
#convert all factor to numeric (since neural network only takes in quantitative variables)
#Trainset:
icu_train_nn <- icu_train.bal
summary(icu_train_nn)
icu_train_nn$GENDER <- as.numeric(as.character(icu_train_nn$GENDER))
icu_train_nn$HTN <- as.numeric(icu_train_nn$HTN)
icu_train_nn$IMMUNOCOMPROMISED <- as.numeric(icu_train_nn$IMMUNOCOMPROMISED)
icu_train_nn$AGE_ABOVE65 <- as.numeric(as.character(icu_train_nn$AGE_ABOVE65))
icu_train_nn$AGE_PERCENTIL <- as.character(icu_train_nn$AGE_PERCENTIL)
for (i in 1:nrow(icu_train_nn)){
if (icu_train_nn$AGE_PERCENTIL[i] =="10th"){
icu_train_nn$AGE_PERCENTIL[i] = 1
}
else if (icu_train_nn$AGE_PERCENTIL[i] =="20th"){
icu_train_nn$AGE_PERCENTIL[i] = 2
}
else if (icu_train_nn$AGE_PERCENTIL[i] =="30th"){
icu_train_nn$AGE_PERCENTIL[i] = 3
}
else if (icu_train_nn$AGE_PERCENTIL[i] =="40th"){
icu_train_nn$AGE_PERCENTIL[i] = 4
}
else if (icu_train_nn$AGE_PERCENTIL[i] =="50th"){
icu_train_nn$AGE_PERCENTIL[i] = 5
}
else if (icu_train_nn$AGE_PERCENTIL[i] =="60th"){
icu_train_nn$AGE_PERCENTIL[i] = 6
}
else if (icu_train_nn$AGE_PERCENTIL[i] =="70th"){
icu_train_nn$AGE_PERCENTIL[i] = 7
}
else if (icu_train_nn$AGE_PERCENTIL[i] =="80th"){
icu_train_nn$AGE_PERCENTIL[i] = 8
}
else if (icu_train_nn$AGE_PERCENTIL[i] =="90th"){
icu_train_nn$AGE_PERCENTIL[i] = 9
}
else if (icu_train_nn$AGE_PERCENTIL[i] =="Above 90th"){
icu_train_nn$AGE_PERCENTIL[i] = 10
}
}
icu_train_nn$AGE_PERCENTIL <- as.numeric(icu_train_nn$AGE_PERCENTIL)
summary(icu_train_nn)
#Testset:
icu_test_nn <- icu_test
summary(icu_test_nn)
icu_test_nn$GENDER <- as.numeric(as.character(icu_test_nn$GENDER))
icu_test_nn$HTN <- as.numeric(icu_test_nn$HTN)
icu_test_nn$IMMUNOCOMPROMISED <- as.numeric(icu_test_nn$IMMUNOCOMPROMISED)
icu_test_nn$AGE_ABOVE65 <- as.numeric(as.character(icu_test_nn$AGE_ABOVE65))
icu_test_nn$AGE_PERCENTIL <- as.character(icu_test_nn$AGE_PERCENTIL)
for (i in 1:nrow(icu_test_nn)){
if (icu_test_nn$AGE_PERCENTIL[i] =="10th"){
icu_test_nn$AGE_PERCENTIL[i] = 1
}
else if (icu_test_nn$AGE_PERCENTIL[i] =="20th"){
icu_test_nn$AGE_PERCENTIL[i] = 2
}
else if (icu_test_nn$AGE_PERCENTIL[i] =="30th"){
icu_test_nn$AGE_PERCENTIL[i] = 3
}
else if (icu_test_nn$AGE_PERCENTIL[i] =="40th"){
icu_test_nn$AGE_PERCENTIL[i] = 4
}
else if (icu_test_nn$AGE_PERCENTIL[i] =="50th"){
icu_test_nn$AGE_PERCENTIL[i] = 5
}
else if (icu_test_nn$AGE_PERCENTIL[i] =="60th"){
icu_test_nn$AGE_PERCENTIL[i] = 6
}
else if (icu_test_nn$AGE_PERCENTIL[i] =="70th"){
icu_test_nn$AGE_PERCENTIL[i] = 7
}
else if (icu_test_nn$AGE_PERCENTIL[i] =="80th"){
icu_test_nn$AGE_PERCENTIL[i] = 8
}
else if (icu_test_nn$AGE_PERCENTIL[i] =="90th"){
icu_test_nn$AGE_PERCENTIL[i] = 9
}
else if (icu_test_nn$AGE_PERCENTIL[i] =="Above 90th"){
icu_test_nn$AGE_PERCENTIL[i] = 10
}
}
icu_test_nn$AGE_PERCENTIL <- as.numeric(icu_test_nn$AGE_PERCENTIL)
summary(icu_test_nn)
#Creating Results Table
#False Positive Rate: supposed to be not be admitted to ICU (ICU=0), but wrongly classified as admitted (ICU=1)
#False Negative Rate: supposed to be be admitted to ICU (ICU=1), but wrongly classified as not admitted (ICU=0)
icu_nn_results_tab <- matrix(data = NA, nrow=4, ncol=7)
rownames(icu_nn_results_tab) <- c('Trainset', 'Testset','Trainset','Testset')
colnames(icu_nn_results_tab) <- c('Model','FPR','FNR','Err', 'Precision', 'Recall', 'F1 Score')
#Generating 1 Hidden Layer Neural Network model
#number of neurons in the hidden layer should be 2/3 size of input layer + size of output layer
#source: https://medium.com/geekculture/introduction-to-neural-network-2f8b8221fbd3
set.seed(2004)
icu_nn_1ly <- neuralnet(ICU ~ ., data = icu_train_nn, hidden = round((2/3)*(ncol(icu_test)-1) + 3), err.fct="ce", linear.output=FALSE)
plot(icu_nn_1ly)
#Generating trainset confusion matrix for 1 Hidden Layer Neural Network model
icu_nn_1ly_train_predict <- predict(icu_nn_1ly, newdata=icu_train_nn, type = 'class')
icu_nn_1ly_train_predict_df <- data.frame(icu_nn_1ly_train_predict)
for (i in 1: nrow(icu_nn_1ly_train_predict_df)){
if (icu_nn_1ly_train_predict_df[i,1] >= 0.5){
icu_nn_1ly_train_predict_df$ICU[i] = '0'
}
else if (icu_nn_1ly_train_predict_df[i,2] >= 0.5){
icu_nn_1ly_train_predict_df$ICU[i] = '1'
}
}
icu_nn_1ly_train_cmatrix <- table(as.factor(icu_train_nn$ICU), as.factor(icu_nn_1ly_train_predict_df$ICU))
fp <- icu_nn_1ly_train_cmatrix[1,2]
tn <- icu_nn_1ly_train_cmatrix[1,1]
fn <- icu_nn_1ly_train_cmatrix[2,1]
tp <- icu_nn_1ly_train_cmatrix[2,2]
#Adding trainset errors into table
icu_nn_results_tab[1,1] <- "Neural Network (1 Hidden Layer)"
icu_nn_results_tab[1,2] <- fp/(fp+tn)
icu_nn_results_tab[1,3] <- fn/(fn+tp)
icu_nn_results_tab[1,4] <- (fp+fn)/(fp+tn+fn+tp)
precision <- tp/(tp+fp)
icu_nn_results_tab[1,5] <- precision
recall <- tp/(tp+fn)
icu_nn_results_tab[1,6] <- recall
icu_nn_results_tab[1,7] <- 2 * ((precision*recall)/(precision + recall))
View(icu_nn_results_tab)
#Generating testset confusion matrix for 1 Hidden Layer Neural Network model
icu_nn_1ly_test_predict <- predict(icu_nn_1ly, newdata=icu_test_nn, type = 'class')
icu_nn_1ly_test_predict_df <- data.frame(icu_nn_1ly_test_predict)
for (i in 1: nrow(icu_nn_1ly_test_predict_df)){
if (icu_nn_1ly_test_predict_df[i,1] >= 0.5){
icu_nn_1ly_test_predict_df$ICU[i] = '0'
}
else if (icu_nn_1ly_test_predict_df[i,2] >= 0.5){
icu_nn_1ly_test_predict_df$ICU[i] = '1'
}
}
icu_nn_1ly_test_cmatrix <- table(as.factor(icu_test_nn$ICU), as.factor(icu_nn_1ly_test_predict_df$ICU))
fp <- icu_nn_1ly_test_cmatrix[1,2]
tn <- icu_nn_1ly_test_cmatrix[1,1]
fn <- icu_nn_1ly_test_cmatrix[2,1]
tp <- icu_nn_1ly_test_cmatrix[2,2]
#Adding testset errors into table
icu_nn_results_tab[2,1] <- "Neural Network (1 Hidden Layer)"
icu_nn_results_tab[2,2] <- fp/(fp+tn)
icu_nn_results_tab[2,3] <- fn/(fn+tp)
icu_nn_results_tab[2,4] <- (fp+fn)/(fp+tn+fn+tp)
precision <- tp/(tp+fp)
icu_nn_results_tab[2,5] <- precision
recall <- tp/(tp+fn)
icu_nn_results_tab[2,6] <- recall
icu_nn_results_tab[2,7] <- 2 * ((precision*recall)/(precision + recall))
View(icu_nn_results_tab)
#Generating 2 Hidden Layer Neural Network model
#number of neurons in the hidden layer should be 2/3 size of input layer + size of output layer
#source: https://medium.com/geekculture/introduction-to-neural-network-2f8b8221fbd3
set.seed(2004)
icu_nn_2ly <- neuralnet(ICU ~ ., data = icu_train_nn, hidden = c((round((2/3)*(ncol(icu_test)-1) + 3)),(round((2/3)*(ncol(icu_test)-1) + 3))) , err.fct="ce", linear.output=FALSE)
plot(icu_nn_2ly)
#Generating trainset confusion matrix for 2 Hidden Layer Neural Network model
icu_nn_2ly_train_predict <- predict(icu_nn_2ly, newdata=icu_train_nn, type = 'class')
icu_nn_2ly_train_predict_df <- data.frame(icu_nn_2ly_train_predict)
for (i in 1: nrow(icu_nn_2ly_train_predict_df)){
if (icu_nn_2ly_train_predict_df[i,1] >= 0.5){
icu_nn_2ly_train_predict_df$ICU[i] = '0'
}
else if (icu_nn_2ly_train_predict_df[i,2] >= 0.5){
icu_nn_2ly_train_predict_df$ICU[i] = '1'
}
}
icu_nn_2ly_train_cmatrix <- table(as.factor(icu_train_nn$ICU), as.factor(icu_nn_2ly_train_predict_df$ICU))
fp <- icu_nn_2ly_train_cmatrix[1,2]
tn <- icu_nn_2ly_train_cmatrix[1,1]
fn <- icu_nn_2ly_train_cmatrix[2,1]
tp <- icu_nn_2ly_train_cmatrix[2,2]
#Adding trainset errors into table
icu_nn_results_tab[3,1] <- "Neural Network (2 Hidden Layer)"
icu_nn_results_tab[3,2] <- fp/(fp+tn)
icu_nn_results_tab[3,3] <- fn/(fn+tp)
icu_nn_results_tab[3,4] <- (fp+fn)/(fp+tn+fn+tp)
precision <- tp/(tp+fp)
icu_nn_results_tab[3,5] <- precision
recall <- tp/(tp+fn)
icu_nn_results_tab[3,6] <- recall
icu_nn_results_tab[3,7] <- 2 * ((precision*recall)/(precision + recall))
View(icu_nn_results_tab)
#Generating testset confusion matrix for 2 Hidden Layer Neural Network model
icu_nn_2ly_test_predict <- predict(icu_nn_2ly, newdata=icu_test_nn, type = 'class')
icu_nn_2ly_test_predict_df <- data.frame(icu_nn_2ly_test_predict)
for (i in 1: nrow(icu_nn_2ly_test_predict_df)){
if (icu_nn_2ly_test_predict_df[i,1] >= 0.5){
icu_nn_2ly_test_predict_df$ICU[i] = '0'
}
else if (icu_nn_2ly_test_predict_df[i,2] >= 0.5){
icu_nn_2ly_test_predict_df$ICU[i] = '1'
}
}
icu_nn_2ly_test_cmatrix <- table(as.factor(icu_test_nn$ICU), as.factor(icu_nn_2ly_test_predict_df$ICU))
fp <- icu_nn_2ly_test_cmatrix[1,2]
tn <- icu_nn_2ly_test_cmatrix[1,1]
fn <- icu_nn_2ly_test_cmatrix[2,1]
tp <- icu_nn_2ly_test_cmatrix[2,2]
#Adding testset errors into table
icu_nn_results_tab[4,1] <- "Neural Network (2 Hidden Layer)"
icu_nn_results_tab[4,2] <- fp/(fp+tn)
icu_nn_results_tab[4,3] <- fn/(fn+tp)
icu_nn_results_tab[4,4] <- (fp+fn)/(fp+tn+fn+tp)
precision <- tp/(tp+fp)
icu_nn_results_tab[4,5] <- precision
recall <- tp/(tp+fn)
icu_nn_results_tab[4,6] <- recall
icu_nn_results_tab[4,7] <- 2 * ((precision*recall)/(precision + recall))
View(icu_nn_results_tab)
#since 2 Hidden Level Neural Network produced a model with a lower total error, it would be adopted over the 1 Hidden Layer model.
# OVERALL ERROR TABLE ----------------------------------------------------------
#Creating overall error table
icu_error_tab <- matrix(data = NA, nrow=8, ncol=7)
rownames(icu_error_tab) <- c('Logistic Regression Train', 'Logistic Regression Test', 'Random Forest Train', 'Random Forest Test', 'Neural Network (1 lvl) Train', 'Neural Network (1 lvl) Test','Neural Network (2 lvl) Train', 'Neural Network (2 lvl) Test')
colnames(icu_error_tab) <- c('Model','FPR','FNR','Err', 'Precision', 'Recall', 'F1 Score')
#Adding errors from the 3 models into the table
icu_error_tab[1:2,]<- icu_logreg_results_tab
icu_error_tab[3:4,]<- icu_rf_results_tab
icu_error_tab[5:8,]<- icu_nn_results_tab
icu_error_tab
setwd("~/Documents/NTU/Y2S2/BC2407/BC2407_Sem4_Team8/Codes")
icu <- fread('ICU_Data_Cleaned.csv', stringsAsFactors = TRUE)
library(data.table)
icu <- fread('ICU_Data_Cleaned.csv', stringsAsFactors = TRUE)
nrow(icu)
ncol(icu)
setwd("~/Documents/NTU/Y2S2/BC2407/BC2407_Sem4_Team8/Codes")
icu.df <- fread('ICU_Data.csv', stringsAsFactors = TRUE)
library(data.table)
icu.df <- fread('ICU_Data.csv', stringsAsFactors = TRUE)
nrow(icu)
nrow(icu.df)
ncol(icu.df)
